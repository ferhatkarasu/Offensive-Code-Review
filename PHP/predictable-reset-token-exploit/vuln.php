<?php
session_start();
$db = new SQLite3('users.sqlite', SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE);
$db->exec("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT UNIQUE, password TEXT, reset_token TEXT)");

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['user'])) {
    $user = $_POST['user'];
    $token = md5(mt_rand(1, 100) . $user . time() . session_id());

    $stmt = $db->prepare("UPDATE users SET reset_token = :token WHERE name = :user");
    $stmt->bindValue(':user', $user, SQLITE3_TEXT);
    $stmt->bindValue(':token', $token, SQLITE3_TEXT);
    $stmt->execute();

    echo "Password reset token: $token\n";
}

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['token'], $_POST['newPassword'])) {
    $token = $_POST['token'];
    $newPassword = $_POST['newPassword'];

    $stmt = $db->prepare("SELECT id FROM users WHERE reset_token = :token");
    $stmt->bindValue(':token', $token, SQLITE3_TEXT);
    $res = $stmt->execute()->fetchArray(1);

    if (strlen($token) == 32 && $res) {
        $stmt = $db->prepare("UPDATE users SET password = :password WHERE id = :id");
        $stmt->bindValue(':password', $newPassword, SQLITE3_TEXT);
        $stmt->bindValue(':id', $res['id'], SQLITE3_INTEGER);
        $stmt->execute();
        die("Password changed!\n");
    }
    http_response_code(403);
    die("Invalid reset token!\n");
}
?>
